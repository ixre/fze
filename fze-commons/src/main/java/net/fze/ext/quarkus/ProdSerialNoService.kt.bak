/**
 * this file is auto generated by tto v0.3.16 !
 * if you want to modify this code,please read guide doc
 * and modify code template later.
 *
 *  please read user guide on https://github.com/ixre/tto
 *
 */

package net.fze.ext.quarkus

import net.fze.common.catch
import net.fze.mzl.board.pojo.ProdSerialBindEntity
import net.fze.mzl.board.pojo.ProdSerialNoEntity
import net.fze.mzl.board.repo.ProdSerialNoJpaRepository
import net.fze.util.Times
import net.fze.util.Types
import net.fze.util.TypeConv
import jakarta.enterprise.context.ApplicationScoped
import jakarta.enterprise.inject.Default
import jakarta.inject.Inject
import jakarta.transaction.Transactional

/** 序列号服务  */
@ApplicationScoped
class ProdSerialNoService {
    @Inject
    @field:Default
    private lateinit var repo: ProdSerialNoJpaRepository

    fun parseId(id: Any): Long {
        return TypeConv.toLong(id)
    }

    /** 根据ID查找序列号 */
    fun findByIdOrNull(id: Long): ProdSerialNoEntity? {
        return this.repo.findByIdOptional(this.parseId(id))?.get()
    }

    fun findBy(query: String, vararg params: Any): ProdSerialNoEntity? {
        val find = this.repo.find(query, *params)
        if (!find.singleResultOptional<ProdSerialNoEntity>().isPresent) {
            return null
        }
        return find.singleResultOptional<ProdSerialNoEntity>()?.get()
    }

    /** 根据条件查找并返回列表 */
    fun listBy(query: String,vararg params: Any): List<ProdSerialNoEntity> {
        return this.repo.list(query, *params)
    }

    /** 保存序列号 */
    @Transactional
    fun saveProdSerialNo(e: ProdSerialNoEntity): Error? {
        return catch {
            var dst: ProdSerialNoEntity
            if (e.id > 0) {
                dst = this.repo.findById(this.parseId(e.id))!!
                dst.updateTime = Times.unix().toLong()
            } else {
                dst = ProdSerialNoEntity()
                dst.createTime = Times.unix().toLong()
            }
            dst.serialCode = e.serialCode
            dst.ownerId = e.ownerId
            dst.ownerType = e.ownerType
            dst.versionId = e.versionId
            dst.prodType = e.prodType
            dst.validDays = e.validDays
            dst.invalidTime = e.invalidTime
            dst.state = e.state
            dst.orderNo = e.orderNo
            dst.reviewerId = e.reviewerId
            dst.reviewerName = e.reviewerName
            dst.updateTime = Times.unix().toLong()
            this.repo.persistAndFlush(dst)
            e.id = dst.id
            null
        }.error()
    }

    /** 批量保存序列号 */
    @Transactional
    fun saveAllProdSerialNo(entities: Iterable<ProdSerialNoEntity>) {
        this.repo.persist(entities)
        this.repo.flush()
    }

    /** 删除序列号 */
    @Transactional
    fun deleteById(id: Long): Error? {
        return catch {
            this.repo.deleteById(this.parseId(id))
        }.error()
    }

}
