import net.fze.annotation.RequireToken;
import net.fze.util.Types;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.AsyncContext;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

@RestController
public class ServerPushController {

    @Autowired
    private IServerEventProvider server;
    @Autowired
    private ServerPushDispatcher dispatcher;

    Logger logger = LoggerFactory.getLogger(ServerEventServerImpl.class);


    @RequestMapping("/subscribe")
    @RequireToken(required = false)
    public void subscribe(@RequestParam("id") String id, HttpServletRequest req, HttpServletResponse rsp) {
        logger.error("开始获取会话");
        AsyncContext ctx = server.connect("erp-sse", req);
        this.check(ctx);
    }


    @GetMapping(value = "/subscribe2")
    @RequireToken(required = false)
    public void subscribe2(HttpServletResponse response) {
        response.setContentType("text/event-stream");
        response.setCharacterEncoding("utf-8");

        try {
            PrintWriter pw = response.getWriter();
            while (true) {
                if (pw.checkError()) {
                    System.out.println("客户端断开连接");
                    break;
                }
                Thread.sleep(1000);
                pw.write("data:行情:" + Math.random() + "\n\n");
                pw.flush();
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    @GetMapping(value = "/subscribe3")
    @RequireToken(required = false)
    public void subscribe3(HttpServletRequest request) {
        AsyncContext ctx = request.startAsync();
        ServletResponse response = ctx.getResponse();
        response.setContentType("text/event-stream");
        response.setCharacterEncoding("utf-8");

        try {
            PrintWriter pw = response.getWriter();
            while (true) {
                if (pw.checkError()) {
                    System.out.println("客户端断开连接");
                    break;
                }
                Thread.sleep(1000);
                pw.write("id:1\n");
                pw.write("retry:1000\n");
                //pw.write("event:onupdate\n"); // 要以on开头
                pw.write("data:行情:" + Math.random() + "\n");
                pw.write("\n\n");
                pw.flush();
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }


    @RequestMapping("/sse/test")
    @RequireToken(required = false)
    public void push(HttpServletRequest req, HttpServletResponse rsp) {
        this.check(null);
    }

    /**
     * 连接后检测推送
     */
    private void check(AsyncContext ctx) {
        logger.error("开始获取会话1");
        this.dispatcher.checkErpPush((event) -> {
            System.out.println("----" + (ctx == null) + ";" + (event == ctx));
            if (ctx == null) return false;
            String id = Types.orValue(event.getRequest().getParameter("id"), "");
            String clientId = Types.orValue(ctx.getRequest().getParameter("id"), "");
            return id.equals(clientId);
        });
    }
}